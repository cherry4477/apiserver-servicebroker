/*
@asiainfo.com
*/

// This file was automatically generated by informer-gen

package v1

import (
	prd_v1 "github.com/asiainfoldp/apiserver-servicebroker/pkg/apis/prd/v1"
	clientset "github.com/asiainfoldp/apiserver-servicebroker/pkg/client/clientset_generated/clientset"
	internalinterfaces "github.com/asiainfoldp/apiserver-servicebroker/pkg/client/informers_generated/externalversions/internalinterfaces"
	v1 "github.com/asiainfoldp/apiserver-servicebroker/pkg/client/listers_generated/prd/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// BindingInformer provides access to a shared informer and lister for
// Bindings.
type BindingInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.BindingLister
}

type bindingInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewBindingInformer constructs a new informer for Binding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewBindingInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				return client.PrdV1().Bindings(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				return client.PrdV1().Bindings(namespace).Watch(options)
			},
		},
		&prd_v1.Binding{},
		resyncPeriod,
		indexers,
	)
}

func defaultBindingInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewBindingInformer(client, meta_v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *bindingInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&prd_v1.Binding{}, defaultBindingInformer)
}

func (f *bindingInformer) Lister() v1.BindingLister {
	return v1.NewBindingLister(f.Informer().GetIndexer())
}
