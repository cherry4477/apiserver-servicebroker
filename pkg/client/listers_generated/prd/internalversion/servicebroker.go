/*
@asiainfo.com
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	prd "github.com/asiainfoldp/apiserver-servicebroker/pkg/apis/prd"
	"k8s.io/apimachinery/pkg/api/errors"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ServiceBrokerLister helps list ServiceBrokers.
type ServiceBrokerLister interface {
	// List lists all ServiceBrokers in the indexer.
	List(selector labels.Selector) (ret []*prd.ServiceBroker, err error)
	// Get retrieves the ServiceBroker from the index for a given name.
	Get(name string) (*prd.ServiceBroker, error)
	ServiceBrokerListerExpansion
}

// serviceBrokerLister implements the ServiceBrokerLister interface.
type serviceBrokerLister struct {
	indexer cache.Indexer
}

// NewServiceBrokerLister returns a new ServiceBrokerLister.
func NewServiceBrokerLister(indexer cache.Indexer) ServiceBrokerLister {
	return &serviceBrokerLister{indexer: indexer}
}

// List lists all ServiceBrokers in the indexer.
func (s *serviceBrokerLister) List(selector labels.Selector) (ret []*prd.ServiceBroker, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*prd.ServiceBroker))
	})
	return ret, err
}

// Get retrieves the ServiceBroker from the index for a given name.
func (s *serviceBrokerLister) Get(name string) (*prd.ServiceBroker, error) {
	key := &prd.ServiceBroker{ObjectMeta: v1.ObjectMeta{Name: name}}
	obj, exists, err := s.indexer.Get(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(prd.Resource("servicebroker"), name)
	}
	return obj.(*prd.ServiceBroker), nil
}
