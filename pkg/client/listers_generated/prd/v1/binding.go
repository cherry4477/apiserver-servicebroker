/*
@asiainfo.com
*/

// This file was automatically generated by lister-gen

package v1

import (
	v1 "github.com/asiainfoldp/apiserver-servicebroker/pkg/apis/prd/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BindingLister helps list Bindings.
type BindingLister interface {
	// List lists all Bindings in the indexer.
	List(selector labels.Selector) (ret []*v1.Binding, err error)
	// Bindings returns an object that can list and get Bindings.
	Bindings(namespace string) BindingNamespaceLister
	BindingListerExpansion
}

// bindingLister implements the BindingLister interface.
type bindingLister struct {
	indexer cache.Indexer
}

// NewBindingLister returns a new BindingLister.
func NewBindingLister(indexer cache.Indexer) BindingLister {
	return &bindingLister{indexer: indexer}
}

// List lists all Bindings in the indexer.
func (s *bindingLister) List(selector labels.Selector) (ret []*v1.Binding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Binding))
	})
	return ret, err
}

// Bindings returns an object that can list and get Bindings.
func (s *bindingLister) Bindings(namespace string) BindingNamespaceLister {
	return bindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BindingNamespaceLister helps list and get Bindings.
type BindingNamespaceLister interface {
	// List lists all Bindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Binding, err error)
	// Get retrieves the Binding from the indexer for a given namespace and name.
	Get(name string) (*v1.Binding, error)
	BindingNamespaceListerExpansion
}

// bindingNamespaceLister implements the BindingNamespaceLister
// interface.
type bindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Bindings in the indexer for a given namespace.
func (s bindingNamespaceLister) List(selector labels.Selector) (ret []*v1.Binding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Binding))
	})
	return ret, err
}

// Get retrieves the Binding from the indexer for a given namespace and name.
func (s bindingNamespaceLister) Get(name string) (*v1.Binding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("binding"), name)
	}
	return obj.(*v1.Binding), nil
}
